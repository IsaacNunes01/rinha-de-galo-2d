[gd_scene load_steps=14 format=3 uid="uid://d11k6gms7tue1"]

[ext_resource type="Texture2D" uid="uid://di7d2y8kah1q8" path="res://galomedroso-removebg-preview.png" id="1_1hyog"]
[ext_resource type="Texture2D" uid="uid://cbw4oo0ithdj3" path="res://RingueDeGalo.jpg" id="1_814x0"]
[ext_resource type="Script" path="res://galo_medroso.gd" id="2_4mphk"]
[ext_resource type="Texture2D" uid="uid://dooykx4ftlkxu" path="res://galoferoz-removebg-preview.png" id="4_vxqe4"]
[ext_resource type="Script" path="res://navigation_agent_2d.gd" id="5_hig2q"]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_canuv"]
radius = 34.0
height = 116.0

[sub_resource type="NavigationPolygon" id="NavigationPolygon_28kbo"]
vertices = PackedVector2Array(1143.87, 582.961, 1143.12, 643.992, 9.88281, 643, 9.11719, 579.031)
polygons = Array[PackedInt32Array]([PackedInt32Array(0, 1, 2, 3)])
outlines = Array[PackedVector2Array]([PackedVector2Array(-1, 569, 1154, 573, 1153, 654, 0, 653), PackedVector2Array(868, 387, 930, 387, 930, 407, 868, 407), PackedVector2Array(268, 391, 327, 391, 327, 406, 268, 406)])

[sub_resource type="GDScript" id="GDScript_ble5s"]
script/source = "# Enemy.gd (Adaptado para Plataformer 2D)
extends CharacterBody2D

@export var speed: float = 100.0
@export var acceleration: float = 10.0
@export var player_detection_range: float = 200.0
@export var jump_velocity: float = -300.0 # Velocidade vertical para o pulo
@export var gravity: float = 980.0 # Gravidade padrão para 2D (ajuste conforme seu projeto)

@onready var navigation_agent: NavigationAgent2D = $NavigationAgent2D
@onready var player: CharacterBody2D = get_tree().get_first_node_in_group(\"player\") # Certifique-se de adicionar o jogador ao grupo \"player\"

enum State { IDLE, CHASE }
var current_state: State = State.IDLE

func _ready() -> void:
	navigation_agent.path_desired_distance = 5.0
	navigation_agent.target_desired_distance = 5.0
	navigation_agent.velocity_computed.connect(on_velocity_computed)

func _physics_process(delta: float) -> void:
	# Aplicar gravidade continuamente
	if not is_on_floor():
		velocity.y += gravity * delta

	match current_state:
		State.IDLE:
			handle_idle_state()
		State.CHASE:
			handle_chase_state(delta)

	# Mover o CharacterBody2D com a velocidade atualizada (incluindo gravidade/pulo)
	move_and_slide()

func handle_idle_state() -> void:
	if player and global_position.distance_to(player.global_position) < player_detection_range:
		change_state(State.CHASE)

func handle_chase_state(delta: float) -> void:
	if not player or global_position.distance_to(player.global_position) >= player_detection_range:
		change_state(State.IDLE)
		return

	navigation_agent.target_position = player.global_position

	var next_path_position: Vector2 = navigation_agent.get_next_path_position()
	var direction_to_next_point: Vector2 = global_position.direction_to(next_path_position)
	var desired_horizontal_velocity: Vector2 = direction_to_next_point.x * speed * Vector2.RIGHT

	# Lógica de pulo básica para plataformas
	if is_on_floor():
		# Verifica se o próximo ponto do caminho está significativamente acima do oponente
		# ou se há um obstáculo horizontal que exige pulo (ex: pequena elevação)
		# O valor \\'10\\' é um limiar; ajuste conforme a altura das suas plataformas.
		if next_path_position.y < global_position.y - 10: 
			velocity.y = jump_velocity
		# Esta é uma simplificação. Para detecção robusta de obstáculos que exigem pulo,
		# Raycasts ou verificações de colisão mais avançadas seriam mais adequadas.
		elif abs(next_path_position.x - global_position.x) > 5 and direction_to_next_point.y < -0.5:			 velocity.y = jump_velocity

	# Passa apenas a velocidade horizontal desejada para o NavigationAgent.
	# A velocidade vertical é gerenciada pela gravidade e pulo no CharacterBody2D.
	navigation_agent.set_velocity(desired_horizontal_velocity)

func on_velocity_computed(safe_velocity: Vector2) -> void:
	# O NavigationAgent nos dá uma velocidade \"segura\" para evitar colisões.
	# Usamos apenas a componente horizontal do safe_velocity do NavigationAgent.
	# A componente vertical (gravidade/pulo) é gerenciada diretamente pelo CharacterBody2D.
	velocity.x = lerp(velocity.x, safe_velocity.x, acceleration * get_physics_process_delta_time())

func change_state(new_state: State) -> void:
	current_state = new_state
	print(\"Enemy changed state to: \", current_state)
"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_ttt4b"]
radius = 39.0
height = 134.0

[sub_resource type="RectangleShape2D" id="RectangleShape2D_l13kt"]
size = Vector2(62, 20)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_1tmq2"]
size = Vector2(59, 15)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_5s4ip"]
size = Vector2(1154, 71)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_v4aas"]
size = Vector2(535, 11)

[node name="Ringue" type="Node2D"]
metadata/_edit_lock_ = true

[node name="Sprite2D" type="Sprite2D" parent="."]
position = Vector2(576, 326)
scale = Vector2(0.96, 1.03413)
texture = ExtResource("1_814x0")
metadata/_edit_lock_ = true

[node name="Galo Medroso" type="CharacterBody2D" parent="."]
position = Vector2(66, 515)
script = ExtResource("2_4mphk")
metadata/_edit_lock_ = true

[node name="Sprite2D" type="Sprite2D" parent="Galo Medroso"]
position = Vector2(0, 1)
scale = Vector2(0.276, 0.264)
texture = ExtResource("1_1hyog")
metadata/_edit_lock_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Galo Medroso"]
shape = SubResource("CapsuleShape2D_canuv")
metadata/_edit_lock_ = true

[node name="NavigationRegion2D" type="NavigationRegion2D" parent="."]
navigation_polygon = SubResource("NavigationPolygon_28kbo")

[node name="Galo Feroz" type="CharacterBody2D" parent="."]
position = Vector2(980, 482)
script = SubResource("GDScript_ble5s")
metadata/_edit_lock_ = true

[node name="Sprite2D" type="Sprite2D" parent="Galo Feroz"]
scale = Vector2(0.42278, 0.406639)
texture = ExtResource("4_vxqe4")
metadata/_edit_lock_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Galo Feroz"]
position = Vector2(1, 20)
shape = SubResource("CapsuleShape2D_ttt4b")
metadata/_edit_lock_ = true

[node name="NavigationAgent2D" type="NavigationAgent2D" parent="Galo Feroz"]
script = ExtResource("5_hig2q")

[node name="Suporte oponente" type="StaticBody2D" parent="."]
position = Vector2(898, 397)
metadata/_edit_lock_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Suporte oponente"]
position = Vector2(1, 0)
shape = SubResource("RectangleShape2D_l13kt")
metadata/_edit_lock_ = true

[node name="ColorRect" type="ColorRect" parent="Suporte oponente"]
offset_left = -30.0
offset_top = -10.0
offset_right = 32.0
offset_bottom = 10.0
color = Color(0.454902, 0.0823529, 0.160784, 1)
metadata/_edit_lock_ = true

[node name="Suporte jogador" type="StaticBody2D" parent="."]
position = Vector2(300, 398)
metadata/_edit_lock_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Suporte jogador"]
position = Vector2(-2.5, 0.5)
shape = SubResource("RectangleShape2D_1tmq2")
metadata/_edit_lock_ = true

[node name="ColorRect" type="ColorRect" parent="Suporte jogador"]
offset_left = -32.0
offset_top = -7.0
offset_right = 27.0
offset_bottom = 8.0
color = Color(0.32549, 0.0470588, 0.0705882, 1)
metadata/_edit_lock_ = true

[node name="Chão" type="StaticBody2D" parent="."]
position = Vector2(577, 608)
metadata/_edit_lock_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Chão"]
shape = SubResource("RectangleShape2D_5s4ip")
metadata/_edit_lock_ = true

[node name="Cerca central" type="StaticBody2D" parent="."]
position = Vector2(612, 213)
metadata/_edit_lock_ = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="Cerca central"]
position = Vector2(-13.5, -1.5)
shape = SubResource("RectangleShape2D_v4aas")
metadata/_edit_lock_ = true

[node name="Cerca esquerda" type="StaticBody2D" parent="."]
position = Vector2(145, 180)
metadata/_edit_lock_ = true

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Cerca esquerda"]
position = Vector2(-32.5495, 4.19647)
scale = Vector2(3.45052, 1.05613)
polygon = PackedVector2Array(-31.4302, -35.2195, 29.4302, 1.70767, 29.72, 22.5384, -32.0098, -14.3888)
metadata/_edit_lock_ = true

[node name="Cerca direita" type="StaticBody2D" parent="."]
position = Vector2(1041, 193)
metadata/_edit_lock_ = true

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Cerca direita"]
position = Vector2(18, 10)
scale = Vector2(9.3, 3.3)
polygon = PackedVector2Array(10.1075, -10.6061, -10.1075, -1.21212, -10, 4.54546, 10, -4.54545)
metadata/_edit_lock_ = true
